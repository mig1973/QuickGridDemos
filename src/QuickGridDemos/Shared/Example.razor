@inject HttpClient Http
@inject IJSRuntime JS

<div class="tabs flex gap-2 font-bold text-sm px-2">
    @foreach (var tabName in GetAllTabNames())
    {
        <button @key="@tabName" class="@TabClass(tabName)" @onclick="@(() => SetTabAsync(tabName))">
            @TabDisplayName(tabName)
        </button>
    }
</div>

@if (_currentTab == SampleTabName)
{
    <div class="mt-4">
        <DynamicComponent Type="Component" />
    </div>
}
else
{
    <div @key="@_currentTab" class="source text-sm">
        <pre>
            <code @ref="codeElement" class="@TabLanguageClass(_currentTab)">@_currentTabSourceCode</code>
        </pre>
    </div>
}

@code {
    private const string SampleTabName = "sample";
    private string _currentTab = SampleTabName;
    private string? _currentTabSourceCode;
    private ElementReference codeElement;
    private bool _shouldRunSyntaxHighlighter;

    [Parameter, EditorRequired] public Type Component { get; set; } = default!;
    [Parameter] public string[]? Sources { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldRunSyntaxHighlighter && _currentTab != SampleTabName)
        {
            _shouldRunSyntaxHighlighter = false;
            await JS.InvokeVoidAsync("hljs.highlightElement", codeElement);
        }
    }

    IEnumerable<string> GetAllTabNames()
    {
        yield return SampleTabName;
        yield return $"{Component.Name}.razor";
        foreach (var source in Sources ?? Enumerable.Empty<string>())
        {
            yield return source;
        }
    }

    async Task SetTabAsync(string tabName)
    {
        if (_currentTab != tabName)
        {
            _currentTab = tabName;
            _currentTabSourceCode = null;

            if (_currentTab != SampleTabName)
            {
                _currentTabSourceCode = await Http.GetStringAsync($"sample_sources/{tabName}.txt");
                _shouldRunSyntaxHighlighter = true;
            }
        }
    }

    string TabClass(string tabName)
    {
        return _currentTab == tabName ? "current" : string.Empty;
    }

    static string TabDisplayName(string tabName)
    {
        if (tabName == SampleTabName)
        {
            return "Sample";
        }

        if (tabName.EndsWith(".cs"))
        {
            return "C#";
        }

        if (tabName.EndsWith(".razor"))
        {
            return "Razor";
        }

        if (tabName.EndsWith(".css"))
        {
            return "CSS";
        }

        return tabName;
    }

    static string TabLanguageClass(string tabName)
    {
        if (tabName.EndsWith(".cs"))
        {
            return "language-csharp";
        }

        if (tabName.EndsWith(".razor"))
        {
            return "language-cshtml-razor";
        }

        if (tabName.EndsWith(".css"))
        {
            return "language-css";
        }

        return null;
    }
}
